# .circleci/config.yml

version: 2.1

jobs:
  deploy:
    machine:
      image: ubuntu-2004:202107-01

    steps:
      - checkout

      # Install dependencies and create virtual environment
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update
            sudo apt install -y python3-pip python3-dev libpq-dev postgresql postgresql-contrib nginx curl
            sudo apt-get install -y python3-pip python3-venv
            python3 -m venv myenv
            source myenv/bin/activate
            pip install -r requirements.txt

      # Create and load environment variables
      # - run:
      #     name: Set environment variables
      #     command: |
      #       echo "export DB_NAME=${DB_NAME}" >> $BASH_ENV
      #       echo "export DB_USER=${DB_USER}" >> $BASH_ENV
      #       echo "export DB_PASSWORD=${DB_PASSWORD}" >> $BASH_ENV
      #       echo "export DB_HOST=${DB_HOST}" >> $BASH_ENV
      #       echo "export DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}" >> $BASH_ENV
      #       echo "export DJANGO_DEBUG=${DJANGO_DEBUG}" >> $BASH_ENV
      #       echo "export DJANGO_TEMPLATE_DEBUG=${DJANGO_TEMPLATE_DEBUG}" >> $BASH_ENV
      #       echo "export ALLOWED_HOSTS=${ALLOWED_HOSTS}" >> $BASH_ENV
      #       echo "export ENVIRONMENT=${ENVIRONMENT}" >> $BASH_ENV
      #       echo "export FLW_SECRET_KEY=${FLW_SECRET_KEY}" >> $BASH_ENV
      #       echo "export EMAIL_HOST_USER=${EMAIL_HOST_USER}" >> $BASH_ENV
      #       echo "export EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}" >> $BASH_ENV
      #       echo "export FLUTTER_VERIFICATION_URL=${FLUTTER_VERIFICATION_URL}" >> $BASH_ENV
      #       echo "export AZURE_ACCOUNT_NAME=${AZURE_ACCOUNT_NAME}" >> $BASH_ENV
      #       echo "export AZURE_CONTAINER=${AZURE_CONTAINER}" >> $BASH_ENV
      #       echo "export AZURE_ACCOUNT_KEY=${AZURE_ACCOUNT_KEY}" >> $BASH_ENV
      #       echo "export ENERGY_BASE_URL=${ENERGY_BASE_URL}" >> $BASH_ENV
      #       echo "export GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}" >> $BASH_ENV
      #       echo "export FIREBASE_CREDENTIALS=${FIREBASE_CREDENTIALS}" >> $BASH_ENV
      #       source $BASH_ENV

      # Deploy the application
      - run:
          name: Deploy application
          command: |
            sshpass -p "${SSH_PASSWORD}" rsync -r . ${SSH_USERNAME}@${SERVER_IP}:~/${PROJECT_FOLDER}
            sshpass -p "${SSH_PASSWORD}" ssh ${SSH_USERNAME}@${SERVER_IP} "cd ~/${PROJECT_FOLDER} && python3 -m venv myenv"
            sshpass -p "${SSH_PASSWORD}" ssh ${SSH_USERNAME}@${SERVER_IP} 'cd ~/${PROJECT_FOLDER} && source myenv/bin/activate && pip install -r requirements.txt'
            sshpass -p "${SSH_PASSWORD}" ssh ${SSH_USERNAME}@${SERVER_IP} "cd ~/${PROJECT_FOLDER} && echo 'export DB_NAME=${DB_NAME}' >> ./.env"
            sshpass -p "${SSH_PASSWORD}" ssh ${SSH_USERNAME}@${SERVER_IP} "cd ~/${PROJECT_FOLDER} && echo 'export DB_USER=${DB_USER}' >> ./.env"
            sshpass -p "${SSH_PASSWORD}" ssh ${SSH_USERNAME}@${SERVER_IP} "cd ~/${PROJECT_FOLDER} && echo 'export DB_PASSWORD=${DB_PASSWORD}' >> ./.env"
            sshpass -p "${SSH_PASSWORD}" ssh ${SSH_USERNAME}@${SERVER_IP} "cd ~/${PROJECT_FOLDER} && echo 'export DB_HOST=${DB_HOST}' >> ./.env"
            sshpass -p "${SSH_PASSWORD}" ssh ${SSH_USERNAME}@${SERVER_IP} "cd ~/${PROJECT_FOLDER} && echo 'export DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}' >> ./.env"
            sshpass -p "${SSH_PASSWORD}" ssh ${SSH_USERNAME}@${SERVER_IP} "cd ~/${PROJECT_FOLDER} && echo 'export DJANGO_DEBUG=${DJANGO_DEBUG}' >> ./.env"
            sshpass -p "${SSH_PASSWORD}" ssh ${SSH_USERNAME}@${SERVER_IP} "cd ~/${PROJECT_FOLDER} && echo 'export DJANGO_TEMPLATE_DEBUG=${DJANGO_TEMPLATE_DEBUG}' >> ./.env"
            sshpass -p "${SSH_PASSWORD}" ssh ${SSH_USERNAME}@${SERVER_IP} "cd ~/${PROJECT_FOLDER} && echo 'export ALLOWED_HOSTS=${ALLOWED_HOSTS}' >> ./.env"
            sshpass -p "${SSH_PASSWORD}" ssh ${SSH_USERNAME}@${SERVER_IP} "cd ~/${PROJECT_FOLDER} && echo 'export ENVIRONMENT=${ENVIRONMENT}' >> ./.env"
            sshpass -p "${SSH_PASSWORD}" ssh ${SSH_USERNAME}@${SERVER_IP} "cd ~/${PROJECT_FOLDER} && echo 'export FLW_SECRET_KEY=${FLW_SECRET_KEY}' >> ./.env"
            sshpass -p "${SSH_PASSWORD}" ssh ${SSH_USERNAME}@${SERVER_IP} "cd ~/${PROJECT_FOLDER} && echo 'export EMAIL_HOST_USER=${EMAIL_HOST_USER}' >> ./.env"
            sshpass -p "${SSH_PASSWORD}" ssh ${SSH_USERNAME}@${SERVER_IP} "cd ~/${PROJECT_FOLDER} && echo 'export EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}' >> ./.env"
            sshpass -p "${SSH_PASSWORD}" ssh ${SSH_USERNAME}@${SERVER_IP} "cd ~/${PROJECT_FOLDER} && echo 'export FLUTTER_VERIFICATION_URL=${FLUTTER_VERIFICATION_URL}' >> ./.env"
            sshpass -p "${SSH_PASSWORD}" ssh ${SSH_USERNAME}@${SERVER_IP} "cd ~/${PROJECT_FOLDER} && echo 'export AZURE_ACCOUNT_NAME=${AZURE_ACCOUNT_NAME}' >> ./.env"
            sshpass -p "${SSH_PASSWORD}" ssh ${SSH_USERNAME}@${SERVER_IP} "cd ~/${PROJECT_FOLDER} && echo 'export AZURE_CONTAINER=${AZURE_CONTAINER}' >> ./.env"
            sshpass -p "${SSH_PASSWORD}" ssh ${SSH_USERNAME}@${SERVER_IP} "cd ~/${PROJECT_FOLDER} && echo 'export AZURE_ACCOUNT_KEY=${AZURE_ACCOUNT_KEY}' >> ./.env"
            sshpass -p "${SSH_PASSWORD}" ssh ${SSH_USERNAME}@${SERVER_IP} "cd ~/${PROJECT_FOLDER} && echo 'export ENERGY_BASE_URL=${ENERGY_BASE_URL}' >> ./.env"
            sshpass -p "${SSH_PASSWORD}" ssh ${SSH_USERNAME}@${SERVER_IP} "cd ~/${PROJECT_FOLDER} && echo 'export GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}' >> ./.env"
            sshpass -p "${SSH_PASSWORD}" ssh ${SSH_USERNAME}@${SERVER_IP} "cd ~/${PROJECT_FOLDER} && echo 'export FIREBASE_CREDENTIALS=${FIREBASE_CREDENTIALS}' >> ./.env"

            sshpass -p "${SSH_PASSWORD}" ssh ${SSH_USERNAME}@${SERVER_IP} 'sudo bash -c "cat > /etc/systemd/system/${PROJECT_FOLDER}-gunicorn.service \<<EOF
            [Unit]
            Description=Gunicorn
            After=network.target

            [Service]
            User=root
            Group=www-data
            WorkingDirectory=/home/${SSH_USERNAME}/${PROJECT_FOLDER}
            ExecStart=/home/${SSH_USERNAME}/${PROJECT_FOLDER}/myenv/bin/gunicorn --access-logfile - --workers 3 --bind unix:/home/root/${PROJECT_FOLDER}/${PROJECT_FOLDER}.sock config.wsgi:application

            [Install]
            WantedBy=multi-user.target
            EOF"'

            sshpass -p "${SSH_PASSWORD}" ssh ${SSH_USERNAME}@${SERVER_IP} 'sudo systemctl daemon-reload'
            sshpass -p "${SSH_PASSWORD}" ssh ${SSH_USERNAME}@${SERVER_IP} 'sudo systemctl start ${PROJECT_FOLDER}-gunicorn'
            sshpass -p "${SSH_PASSWORD}" ssh ${SSH_USERNAME}@${SERVER_IP} 'sudo systemctl enable ${PROJECT_FOLDER}-gunicorn'

            sshpass -p "${SSH_PASSWORD}" ssh ${SSH_USERNAME}@${SERVER_IP} 'sudo bash -c "cat > /etc/nginx/sites-available/${PROJECT_FOLDER} \<<EOF
            server {
                listen 80;
                server_name ${SERVER_NAME} ${SERVER_IP};

                location = /favicon.ico { access_log off; log_not_found off; }
                location /static/ {
                    root /home/projectdir/tiwa_proj;
                }

                location / {
                    include proxy_params;
                    proxy_pass http://unix:/home/root/${PROJECT_FOLDER}/${PROJECT_FOLDER}.sock;
                }
            }
            EOF"'

            sshpass -p "${SSH_PASSWORD}" ssh ${SSH_USERNAME}@${SERVER_IP} 'sudo ln -s /etc/nginx/sites-available/${PROJECT_FOLDER} /etc/nginx/sites-enabled/'

            sshpass -p "${SSH_PASSWORD}" ssh ${SSH_USERNAME}@${SERVER_IP} 'sudo nginx -t'
            sshpass -p "${SSH_PASSWORD}" ssh ${SSH_USERNAME}@${SERVER_IP} 'sudo systemctl restart nginx'
            sshpass -p "${SSH_PASSWORD}" ssh ${SSH_USERNAME}@${SERVER_IP} 'sudo systemctl restart gunicorn'

  setup-postgres:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk update && \ 
            apk add openssh
      - run:
          name: Update known hosts
          command: ssh-keyscan -H ssh.{SERVER_IP} >> ~/.ssh/known_hosts
      - run:
          name: Install dependencies
          command: |
            # install the dependencies needed for your playbook
            apk add --update ansible 
      - run:
          name: Configure DB
          command: |
            ansible-playbook -i inventory.txt playbook.yml --tags "setup_postgresql"



# Sequential workflow
workflows:
  # Name the workflow
  myWorkflow:
    jobs:
      - setup-postgres
      # - deploy
        