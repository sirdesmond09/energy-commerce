# .circleci/config.yml

version: 2.1

jobs:
  deploy:
    machine:
      image: ubuntu-2004:202107-01

    steps:
      - checkout

      # Install dependencies and create virtual environment
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update
            sudo apt install -y python3-pip python3-dev libpq-dev postgresql postgresql-contrib nginx curl
            sudo apt-get install -y python3-pip python3-venv
            python3 -m venv myenv
            source myenv/bin/activate
            pip install -r requirements.txt

      # Create and load environment variables
      - run:
          name: Set environment variables
          command: |
            echo "export DB_NAME=${DB_NAME}" >> $BASH_ENV
            echo "export DB_USER=${DB_USER}" >> $BASH_ENV
            echo "export DB_PASSWORD=${DB_PASSWORD}" >> $BASH_ENV
            echo "export DB_HOST=${DB_HOST}" >> $BASH_ENV
            echo "export DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}" >> $BASH_ENV
            echo "export DJANGO_DEBUG=${DJANGO_DEBUG}" >> $BASH_ENV
            echo "export DJANGO_TEMPLATE_DEBUG=${DJANGO_TEMPLATE_DEBUG}" >> $BASH_ENV
            echo "export ALLOWED_HOSTS=${ALLOWED_HOSTS}" >> $BASH_ENV
            echo "export ENVIRONMENT=${ENVIRONMENT}" >> $BASH_ENV
            echo "export FLW_SECRET_KEY=${FLW_SECRET_KEY}" >> $BASH_ENV
            echo "export EMAIL_HOST_USER=${EMAIL_HOST_USER}" >> $BASH_ENV
            echo "export EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}" >> $BASH_ENV
            echo "export FLUTTER_VERIFICATION_URL=${FLUTTER_VERIFICATION_URL}" >> $BASH_ENV
            echo "export AZURE_ACCOUNT_NAME=${AZURE_ACCOUNT_NAME}" >> $BASH_ENV
            echo "export AZURE_CONTAINER=${AZURE_CONTAINER}" >> $BASH_ENV
            echo "export AZURE_ACCOUNT_KEY=${AZURE_ACCOUNT_KEY}" >> $BASH_ENV
            echo "export ENERGY_BASE_URL=${ENERGY_BASE_URL}" >> $BASH_ENV
            echo "export GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}" >> $BASH_ENV
            echo "export FIREBASE_CREDENTIALS=${FIREBASE_CREDENTIALS}" >> $BASH_ENV
            source $BASH_ENV

      # Set up database
      - run:
          name: Set up database
          command: |
            sudo apt-get install -y postgresql postgresql-contrib
            sudo service postgresql start
            sudo su postgres -c "psql -c 'CREATE DATABASE ${DB_NAME};'"
            sudo su postgres -c "psql -c 'CREATE USER ${DB_USER} WITH PASSWORD '"'"'${DB_PASSWORD}'"'"';'"
            sudo su postgres -c "psql -c 'GRANT ALL PRIVILEGES ON DATABASE ${DB_NAME} TO ${DB_USER};'"

      # Deploy the application
      - run:
          name: Deploy application
          command: |
            # Copy the application to the server
            ssh root@${SERVER_IP} 'mkdir ${PROJECT_FOLDER}'
            rsync -r . root@${SERVER_IP}:~/${PROJECT_FOLDER}

            # Set up virtual environment on the server
            ssh root@${SERVER_IP} 'cd ~/${PROJECT_FOLDER} && python3 -m venv myenv'
            ssh root@${SERVER_IP} 'cd ~/${PROJECT_FOLDER} && source myenv/bin/activate && pip install -r requirements.txt'

            # Set up environment variables on the server
            ssh root@${SERVER_IP} 'echo "export DB_NAME=${DB_NAME}" >> ~/.bashrc'
            ssh root@${SERVER_IP} 'echo "export DB_USER=${DB_USER}" >> ~/.bashrc'
            ssh root@${SERVER_IP} 'echo "export DB_PASSWORD=${DB_PASSWORD}" >> ~/.bashrc'
            ssh root@${SERVER_IP} 'echo "export DB_HOST=${DB_HOST}" >> ~/.bashrc'
            ssh root@${SERVER_IP} 'echo "export SECRET_KEY=${SECRET_KEY}" >> ~/.bashrc'
            ssh root@${SERVER_IP} 'echo "export DEBUG=${DEBUG}" >> ~/.bashrc'
            ssh root@${SERVER_IP} 'echo "export ALLOWED_HOSTS=${ALLOWED_HOSTS}" >> ~/.bashrc'

            # Create systemd service file for Gunicorn
            ssh root@${SERVER_IP} 'sudo bash -c "cat > /etc/systemd/system/${PROJECT_FOLDER}-gunicorn.service <<EOF
            [Unit]
            Description=Gunicorn
            After=network.target

            [Service]
            User=root
            Group=www-data
            WorkingDirectory=/home/root/${PROJECT_FOLDER}
            ExecStart=/home/root/${PROJECT_FOLDER}/myenv/bin/gunicorn --access-logfile - --workers 3 --bind unix:/home/root/${PROJECT_FOLDER}/${PROJECT_FOLDER}.sock config.wsgi:application

            [Install]
            WantedBy=multi-user.target
            EOF"'

            # Start and enable the Gunicorn service
            ssh root@${SERVER_IP} 'sudo systemctl daemon-reload'
            ssh root@${SERVER_IP} 'sudo systemctl start ${PROJECT_FOLDER}-gunicorn'
            ssh root@${SERVER_IP} 'sudo systemctl enable ${PROJECT_FOLDER}-gunicorn'

            # Configure Nginx to serve the application
            ssh root@${SERVER_IP} 'sudo bash -c "cat > /etc/nginx/sites-available/${PROJECT_FOLDER} <<EOF
            server {
                listen 80;
                server_name ${SERVER_NAME};

                location / {
                    include proxy_params;
                    proxy_pass http://unix:/home/root/${PROJECT_FOLDER}/${PROJECT_FOLDER}.sock;
                }
            }
            EOF"'

            ssh root@${SERVER_IP} 'sudo ln -s /etc/nginx/sites-available/${PROJECT_FOLDER} /etc/nginx/sites-enabled/'

            # Test Nginx configuration and restart service
            ssh root@${SERVER_IP} 'sudo nginx -t'
            ssh root@${SERVER_IP} 'sudo systemctl restart nginx'


# Sequential workflow
workflows:
  # Name the workflow
  myWorkflow:
    jobs:
      - deploy